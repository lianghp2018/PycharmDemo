1.应用场景：
    数据发生变化,每个数据的下标也随之变化,无法保证数据变化前后能用统一的标准(下标?)查找数据

2.字典以键值对的形式出现,其数据与数据顺序没有关系,即不支持下标,后期无论数据如何发生变化,
    都可以通过对应的键名查找到数据.

3.字典的特点:
    符号为大括号
    数据以键值对的形式出现
    各个键值对以逗号隔开
    可变数据类型

4.创建字典的语法 --01
# 有数据的字典
dict1 = {'name': 'TOM', 'age': 20, 'gender': '男'}

# 空字典
dict2 = {}
dict3 = dict()

5.字典常见操作
--新增 & 修改  02
字典序列[key] = 值
    *注:key存在修改值,不存在新增键值对

--删除 03
del 删除字典或指定键值对
        *被删除的指定键值对必须存在,否则报错: KeyError
clear() 清空键值对

--查找 04
    key值查找 -- 字典序列[key]
        *注:没有key则报错: KeyError

    函数:
        get() --  字典序列.get(key, 默认值)
            *注:找不到key则返回默认值,默认值省略则返回None

        keys() 获取所有的key,返回可迭代对象

        values() 获取所有的value,返回可迭代对象

        items() 获取所有的键值对,返回可迭代对象
            *注:返回的对象里面的数据类型是元组,元组数据1是key,数据2是对应的value
            dict_items([('name', 'TOM'), ('age', 20), ('gender', '男')])

6.字典循环遍历
    遍历key --keys() for

    遍历value --values() for

    遍历items() --items() for

    遍历键值对(拆包):
    for key, value in dict1.items():
        print(f'{key} = {value}')

    输出如下:
        name = TOM
        age = 20
        gender = 男
